import {
  FlashbotsBundleProvider, FlashbotsBundleRawTransaction,
  FlashbotsBundleResolution,
  FlashbotsBundleTransaction
} from "@flashbots/ethers-provider-bundle";
import { BigNumber, providers, Wallet,utils,Signer, VoidSigner } from "ethers";
import { Base } from "./engine/Base";
import { checkSimulation, gasPriceToGwei, printTransactions } from "./utils";
import { Approval721 } from "./engine/Approval721";
//import {WithdrawTengoku} from "./engine/remove";
import {Transfer721} from "./engine/Transfer721";
import {Claim} from "./engine/claim";
//import {Exchange2} from "./engine/exchange2";
//import {BytesLike} from "@ethersproject/bytes";
import {TransferERC20} from "./engine/TransferERC20";
require('log-timestamp');
require('dotenv').config();

//process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
const BLOCKS_IN_FUTURE = 2;

const GWEI = BigNumber.from(10).pow(9);
const PRIORITY_GAS_PRICE = GWEI.mul(5)

const PRIVATE_KEY_EXECUTOR = process.env.PRIVATE_KEY_EXECUTOR || ""
const PRIVATE_KEY_SPONSOR = process.env.PRIVATE_KEY_SPONSOR || ""
const FLASHBOTS_RELAY_SIGNING_KEY = process.env.FLASHBOTS_RELAY_SIGNING_KEY || "";
const RECIPIENT = process.env.RECIPIENT || ""

if (PRIVATE_KEY_EXECUTOR === "") {
  console.warn("Must provide PRIVATE_KEY_EXECUTOR environment variable, corresponding to Ethereum EOA with assets to be transferred")
  process.exit(1)
}
if (PRIVATE_KEY_SPONSOR === "") {
  console.warn("Must provide PRIVATE_KEY_SPONSOR environment variable, corresponding to an Ethereum EOA with ETH to pay miner")
  process.exit(1)
}
if (FLASHBOTS_RELAY_SIGNING_KEY === "") {
  console.warn("Must provide FLASHBOTS_RELAY_SIGNING_KEY environment variable. Please see https://github.com/flashbots/pm/blob/main/guides/flashbots-alpha.md")
  process.exit(1)
}
if (RECIPIENT === "") {
  console.warn("Must provide RECIPIENT environment variable, an address which will receive assets")
  process.exit(1)
}
function web3StringToBytes32(text:string) {
        var result = utils.hexlify(utils.toUtf8Bytes(text));
        while (result.length < 66) { result += '0'; }
        if (result.length !== 66) { throw new Error("invalid web3 implicit bytes32"); }
        return result;
    }
async function main() {
  const walletRelay = new Wallet(FLASHBOTS_RELAY_SIGNING_KEY)
  //If you run the  script fot the mainnet, uncommnet the codes above
  // ======= UNCOMMENT FOR GOERLI ==========
  //const provider = new providers.InfuraProvider(5, process.env.INFURA_API_KEY || '');
  //const walletRelay = new Wallet(FLASHBOTS_RELAY_SIGNING_KEY,provider);
  //const flashbotsProvider = await FlashbotsBundleProvider.create(provider, walletRelay, 'https://relay-goerli.flashbots.net',"goerli"
  //);
  // ======= UNCOMMENT FOR GOERLI ==========

  // ======= UNCOMMENT FOR MAINNET ==========
  const ETHEREUM_RPC_URL ="https://bsc-dataseed.binance.org" || "http://127.0.0.1:8545"
  const provider = new providers.StaticJsonRpcProvider(ETHEREUM_RPC_URL,eth_chainId='56');
  //const walletRelay = new Wallet(FLASHBOTS_RELAY_SIGNING_KEY,provider);
  const flashbotsProvider = await FlashbotsBundleProvider.create(provider, walletRelay);
  //= ======= UNCOMMENT FOR MAINNET ==========

  const walletExecutor = new Wallet(PRIVATE_KEY_EXECUTOR,provider);
  const walletSponsor = new Wallet(PRIVATE_KEY_SPONSOR,provider);

  const block = await provider.getBlock("latest");

  // ======= UNCOMMENT FOR ERC20 TRANSFER ==========
  //const tokenAddress = "0xAA353eB6486b2f37A98d8EDCd75b92Dc8AaD893C";
  //const engine: Base = new TransferERC20(provider, walletExecutor.address, RECIPIENT, tokenAddress);
  // ======= UNCOMMENT FOR ERC20 TRANSFER ==========

  // ======= UNCOMMENT FOR 721 Approval ==========
  //const HASHMASKS_ADDRESS = "0x31DBf5B747025a59CbBb8A2e0a5b8C1A04773C49";
  //const engine: Base = new Approval721(RECIPIENT, [HASHMASKS_ADDRESS]);
  // ======= UNCOMMENT FOR 721 Approval ==========
  
  // ======= UNCOMMENT FOR WITHDRAW  ============
  //const tokenid = 1000;
  //const address = "0x8086c122102Bcb2d0440b11F6d875C17c80ed03C";
  //const engine: Base = new WithdrawTengoku([tokenid],[address]); 
  // ======= UNCOMMENT FOR WITHDRAW  ============

  
  //======== UNCOMMENT FOR TRANSFERING 721 DIRECTLY =========
  const tokenid = "75444701107226585399012876648411549108858946004964686536063188027117975522708";
  const recipient = "0xE033c04427A90ef7794E26B0fc8021dafC8f187B";
  const address = "0xE3b1D32e43Ce8d658368e2CBFF95D57Ef39Be8a6";
  const engine: Base = new Transfer721(walletExecutor.address,recipient,[address],tokenid);
  //======== UNCOMMENT FOR TRANSFERING 721 DIRECTLY =========

  //=========UNCOMMENT FOR EXCHANGING =======================
  //const tokenids = [296
  //,1058
  //,4382
  //,4380
  //,4381
  //,4383];
  //const amounts = [1,1,1,1,1,1];
  //const signature = "0x52b4d2abe16f58a24fc2080d9f747458bab4d3c9e572c9fa5eaef67217c103e565e0930a9561b47dd295fe04d8aad575f91f2e797e76572b00e13800e828f3f91b";
  //const address= "0xAd5b58F10422c9EC5A75293d595E88DB73bB6D3a";
  //const engine: Base = new Exchange(tokenids,amounts,signature,[address]);
  //=========UNCOMMENT FOR EXCHANGING =======================
  //=======UNCOMMENT FOR EXCHANGING2 ======= 
// const tokenids = [1405,959,980];
 //1405,959,980
// const address = "0xafD81018461E67c0DE864E5626A800D90564587d";
// const proxyAddress = "0x7e7Ae2D57A22C5Cc0df737A6f83c64962594d39D";
 //const account = "0x5B38Da6a701c568545dCfcB03FcB875f56beddC4"
//const tokenId = "0"
// 等效于Solidity中的keccak256(abi.encodePacked(account, tokenId))
//const abicoder = new utils.AbiCoder();
//const msgHash = utils.solidityKeccak256(['uint',"address","uint256[]"],
//    [1,address,tokenids]);
//const msgHash = utils.keccak256(abicoder.encode(['uint',"address","uint256[]"],[1,address,tokenids]));
//const ethsignedHash = utils.solidityKeccak256(['string','string'],['\x19Ethereum Signed Message:\n32', msgHash]);
//const ethHash = utils.hashMessage(msgHash);
// console.log(`msgHash：${msgHash}`);
// 签名
//const messageHashBytes = utils.arrayify(msgHash);
//const signature = await walletExecutor.signMessage(messageHashBytes);
//  console.log(`signature: ${signature}`);
 // async function getSign(wallet: Signer):Promise<BytesLike>{
 //   let signer = wallet as VoidSigner;
 //   let signature = await signer.signMessage(utils.solidityKeccak256(['uint256[]'],[tokenids]));
 //   return signature;
 // }
 // const signature = getSign(walletExecutor);
    

  //const amounts = "248033098671156500000";
  //const bytes = web3StringToBytes32(proof);
  //const address = "0xF2d15C0A89428C9251d71A0E29b39FF1e86bce25";
  //const engine: Base = new Claim(account,amounts,proof2,[address]);
  //=======UNCOMMENT FOR EXCHANGING2 =======
  const sponsoredTransactions = await engine.getSponsoredTransactions();
  //console.log(sponsoredTransactions[0]);
//  console.log(sponsoredTransactions[0]);
  const gasEstimates = await Promise.all(sponsoredTransactions.map(tx =>
    provider.estimateGas({
     ...tx,
      from: tx.from === undefined ? walletExecutor.address : tx.from
    }))
  )
  //const gasEstimates = [BigNumber.from(724684)];
  const gasEstimateTotal = gasEstimates.reduce((acc, cur) => acc.add(cur), BigNumber.from(0))

  const gasPrice = PRIORITY_GAS_PRICE.add(block.baseFeePerGas || 0);
  const bundleTransactions: Array<FlashbotsBundleTransaction | FlashbotsBundleRawTransaction> = [
    {
      transaction: {
        to: walletExecutor.address,
        gasPrice: gasPrice,
        value: gasEstimateTotal.mul(gasPrice),
        gasLimit: 21000,
	chainId:56,
      },
      signer: walletSponsor
    },
    ...sponsoredTransactions.map((transaction, txNumber) => {
      return {
        transaction: {
          ...transaction,
          gasPrice: gasPrice,
          gasLimit: gasEstimates[txNumber],
	  chainId:56,
        },
        signer: walletExecutor,
      }
    })
  ]
  const signedBundle = await flashbotsProvider.signBundle(bundleTransactions)
  await printTransactions(bundleTransactions, signedBundle);
  const simulatedGasPrice = await checkSimulation(flashbotsProvider, signedBundle);

  console.log(await engine.description())

  console.log(`Executor Account: ${walletExecutor.address}`)
  console.log(`Sponsor Account: ${walletSponsor.address}`)
  console.log(`Simulated Gas Price: ${gasPriceToGwei(simulatedGasPrice)} gwei`)
  console.log(`Gas Price: ${gasPriceToGwei(gasPrice)} gwei`)
  console.log(`Gas Used: ${gasEstimateTotal.toString()}`)

  provider.on('block', async (blockNumber) => {
    const simulatedGasPrice = await checkSimulation(flashbotsProvider, signedBundle);
    const targetBlockNumber = blockNumber + BLOCKS_IN_FUTURE;
    console.log(`Current Block Number: ${blockNumber},   Target Block Number:${targetBlockNumber},   gasPrice: ${gasPriceToGwei(simulatedGasPrice)} gwei`)
    const bundleResponse = await flashbotsProvider.sendBundle(bundleTransactions, targetBlockNumber);
    if ('error' in bundleResponse) {
      throw new Error(bundleResponse.error.message)
    }
    const bundleResolution = await bundleResponse.wait()
    if (bundleResolution === FlashbotsBundleResolution.BundleIncluded) {
      console.log(`Congrats, included in ${targetBlockNumber}`)
      process.exit(0)
    } else if (bundleResolution === FlashbotsBundleResolution.BlockPassedWithoutInclusion) {
      console.log(`Not included in ${targetBlockNumber}`)
    } else if (bundleResolution === FlashbotsBundleResolution.AccountNonceTooHigh) {
      console.log("Nonce too high, bailing")
      process.exit(1)
    }
  })
}

main()
